name: Deploy Nginx Config and Application

on:
  push:
    paths:
      - 'nginx/**'  
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up SSH for remote deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 1: Backup Nginx Configuration
      - name: Backup current Nginx configuration
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.SERVER_ADDRESS }} "sudo cp /etc/nginx/conf.d/grafana.conf /etc/nginx/conf.d/grafana.conf.bak"

      # Step 2: Create templated config with environment variables
      - name: Create templated config
        run: |
          mkdir -p tmp
          # Alterado para caminho correto
          envsubst '${DOMAIN_NAME} ${SSL_CERTIFICATE_PATH} ${SSL_CERTIFICATE_KEY_PATH} ${HSTS_MAX_AGE} ${SSL_PROTOCOLS} ${SSL_CIPHERS}' < ./nginx/grafana.conf > tmp/grafana.conf
          echo "Generated config file content:"
          cat tmp/grafana.conf
        env:
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          SSL_CERTIFICATE_PATH: "/etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem"
          SSL_CERTIFICATE_KEY_PATH: "/etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/privkey.pem"
          HSTS_MAX_AGE: "31536000"
          SSL_PROTOCOLS: "TLSv1.2 TLSv1.3"
          SSL_CIPHERS: "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256"

      # Step 3: Copy Nginx configuration to server
      - name: Copy Nginx configuration to server
        run: |
          scp -o StrictHostKeyChecking=no tmp/grafana.conf ec2-user@${{ secrets.SERVER_ADDRESS }}:/tmp/

      # Step 4: Move Nginx config and set permissions
      - name: Move Nginx config and set permissions
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.SERVER_ADDRESS }} "sudo mv /tmp/grafana.conf /etc/nginx/conf.d/ && sudo chown root:root /etc/nginx/conf.d/grafana.conf"

      # Step 5: Test Nginx configuration
      - name: Test Nginx configuration
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.SERVER_ADDRESS }} "sudo nginx -t"

      # Step 6: Restart Nginx
      - name: Restart Nginx
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.SERVER_ADDRESS }} "sudo systemctl restart nginx"

      # Step 7: Run post-deployment tests
      - name: Run post-deployment tests
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.SERVER_ADDRESS }} "curl -f http://localhost:80 || exit 1"
